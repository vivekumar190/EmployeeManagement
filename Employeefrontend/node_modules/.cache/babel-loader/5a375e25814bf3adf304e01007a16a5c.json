{"ast":null,"code":"class $5b160d28a433310d$export$c17fa47878dc55b6 {\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key, locale) {\n    let strings = this.strings[locale];\n\n    if (!strings) {\n      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n\n  constructor(messages) {\n    let defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n    // Clone messages so we don't modify the original object.\n    this.strings = { ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n\n}\n\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings) {\n  let defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  let language = $5b160d28a433310d$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split('-')[0];\n}\n\nconst $6db58dc88e78b024$var$pluralRulesCache = new Map();\nconst $6db58dc88e78b024$var$numberFormatCache = new Map();\n\nclass $6db58dc88e78b024$export$2f817fcdc4b89ae0 {\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key, variables) {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  plural(count, options) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'cardinal';\n    let opt = options['=' + count];\n    if (opt) return typeof opt === 'function' ? opt() : opt;\n    let key = this.locale + ':' + type;\n    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);\n\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {\n        type: type\n      });\n      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  number(value) {\n    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);\n\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);\n    }\n\n    return numberFormat.format(value);\n  }\n\n  select(options, value) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  constructor(locale, strings) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n}\n\nexport { $5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary, $6db58dc88e78b024$export$2f817fcdc4b89ae0 as LocalizedStringFormatter };","map":{"version":3,"mappings":"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","names":["$5b160d28a433310d$export$c17fa47878dc55b6","getStringForLocale","key","locale","strings","$5b160d28a433310d$var$getStringsForLocale","defaultLocale","string","Error","messages","language","$5b160d28a433310d$var$getLanguage","startsWith","Intl","Locale","split","$6db58dc88e78b024$var$pluralRulesCache","Map","$6db58dc88e78b024$var$numberFormatCache","$6db58dc88e78b024$export$2f817fcdc4b89ae0","format","variables","message","plural","count","options","type","opt","pluralRules","get","PluralRules","set","selected","select","other","number","value","numberFormat","NumberFormat"],"sources":["C:\\Users\\MR . Noobick\\Desktop\\Employee Management\\Employeefrontend\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\LocalizedStringDictionary.ts","C:\\Users\\MR . Noobick\\Desktop\\Employee Management\\Employeefrontend\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\LocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedString} from './LocalizedStringFormatter';\n\nexport type LocalizedStrings<K extends string, T extends LocalizedString> = {\n  [lang: string]: Record<K, T>\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class LocalizedStringDictionary<K extends string = string, T extends LocalizedString = string> {\n  private strings: LocalizedStrings<K, T>;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings<K, T>, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.strings = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key: K, locale: string): T {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale<K extends string, T extends LocalizedString>(locale: string, strings: LocalizedStrings<K, T>, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedStringDictionary} from './LocalizedStringDictionary';\n\nexport type Variables = Record<string, string | number | boolean> | undefined;\nexport type LocalizedString = string | ((args: Variables, formatter?: LocalizedStringFormatter<any, any>) => string);\ntype InternalString = string | (() => string);\n\nconst pluralRulesCache = new Map<string, Intl.PluralRules>();\nconst numberFormatCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Formats localized strings from a LocalizedStringDictionary. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers for the locale.\n */\nexport class LocalizedStringFormatter<K extends string = string, T extends LocalizedString = string> {\n  private locale: string;\n  private strings: LocalizedStringDictionary<K, T>;\n\n  constructor(locale: string, strings: LocalizedStringDictionary<K, T>) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key: K, variables?: Variables): string {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  protected plural(count: number, options: Record<string, InternalString>, type: Intl.PluralRuleType = 'cardinal') {\n    let opt = options['=' + count];\n    if (opt) {\n      return typeof opt === 'function' ? opt() : opt;\n    }\n\n    let key = this.locale + ':' + type;\n    let pluralRules = pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {type});\n      pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  protected number(value: number) {\n    let numberFormat = numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n\n  protected select(options: Record<string, InternalString>, value: string) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}