{"ast":null,"code":"import { filterDOMProps as $kKV4x$filterDOMProps, mergeProps as $kKV4x$mergeProps } from \"@react-aria/utils\";\nimport { useFocusable as $kKV4x$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $kKV4x$usePress } from \"@react-aria/interactions\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $298d61e98472621b$exports = {};\n$parcel$export($298d61e98472621b$exports, \"useLink\", () => $298d61e98472621b$export$dcf14c9974fe2767);\n\nfunction $298d61e98472621b$export$dcf14c9974fe2767(props, ref) {\n  let {\n    elementType = 'a',\n    onPress: onPress,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled: isDisabled,\n    ...otherProps\n  } = props;\n  let linkProps;\n  if (elementType !== 'a') linkProps = {\n    role: 'link',\n    tabIndex: !isDisabled ? 0 : undefined\n  };\n  let {\n    focusableProps: focusableProps\n  } = $kKV4x$useFocusable(props, ref);\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = $kKV4x$usePress({\n    onPress: onPress,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    isDisabled: isDisabled,\n    ref: ref\n  });\n  let domProps = $kKV4x$filterDOMProps(otherProps, {\n    labelable: true\n  });\n  let interactionHandlers = $kKV4x$mergeProps(focusableProps, pressProps);\n  return {\n    isPressed: isPressed,\n    linkProps: $kKV4x$mergeProps(domProps, { ...interactionHandlers,\n      ...linkProps,\n      'aria-disabled': isDisabled || undefined,\n      onClick: e => {\n        pressProps.onClick(e);\n\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n\nexport { $298d61e98472621b$export$dcf14c9974fe2767 as useLink };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;SAwCgBA,0CAAQC,OAAwBC,KAAuC;EACrF,IAAI;IACFC,WAAW,GAAG,GADZ;IACeC,SACjBA,OAFE;IAEKC,cACPA,YAHE;IAGUC,YACZA,UAJE;IAKF;IACAC,OAAO,EAAEC,iBANP;IAMwBC,YAC1BA,UAPE;IAOQ,GACPC;EARD,IASAT,KATJ;EAWA,IAAIU,SAAJ;EACA,IAAIR,WAAW,KAAK,GAApB,EACEQ,SAAS,GAAG;IACVC,IAAI,EAAE,MADI;IAEVC,QAAQ,GAAGJ,UAAH,GAAgB,CAAhB,GAAoBK;EAFlB,CAAZ;EAKF,IAAI;IAACC;EAAD,IAAmBC,mBAAY,CAACf,KAAD,EAAQC,GAAR,CAAnC;EACA,IAAI;IAACe,sBAAD;IAAWC,WAAEA;EAAb,IAA0BC,eAAQ,CAAC;aAACf,OAAD;kBAAUC,YAAV;gBAAwBC,UAAxB;gBAAoCG,UAApC;SAAgDP;EAAhD,CAAD,CAAtC;EACA,IAAIkB,QAAQ,GAAGC,qBAAc,CAACX,UAAD,EAAa;IAACY,SAAS,EAAE;EAAZ,CAAb,CAA7B;EACA,IAAIC,mBAAmB,GAAGC,iBAAU,CAACT,cAAD,EAAiBE,UAAjB,CAApC;EAEA,OAAO;eACLC,SADK;IAELP,SAAS,EAAEa,iBAAU,CAACJ,QAAD,EAAW,KAC3BG,mBAD2B;SAE3BZ,SAF2B;MAG9B,iBAAiBF,UAAU,IAAIK,SAHD;MAI9BP,OAAO,EAAGkB,CAAH,IAAS;QACdR,UAAU,CAACV,OAAX,CAAmBkB,CAAnB;;QACA,IAAIjB,iBAAJ,EAAuB;UACrBA,iBAAiB,CAACiB,CAAD,CAAjB;UACAC,OAAO,CAACC,IAAR,CAAa,2CAAb;QACD;MACF;IAV6B,CAAX;EAFhB,CAAP;AAeD","names":["$298d61e98472621b$export$dcf14c9974fe2767","props","ref","elementType","onPress","onPressStart","onPressEnd","onClick","deprecatedOnClick","isDisabled","otherProps","linkProps","role","tabIndex","undefined","focusableProps","$kKV4x$useFocusable","pressProps","isPressed","$kKV4x$usePress","domProps","$kKV4x$filterDOMProps","labelable","interactionHandlers","$kKV4x$mergeProps","e","console","warn"],"sources":["C:\\Users\\MR . Noobick\\Desktop\\Employee Management\\Employeefrontend\\node_modules\\@react-aria\\link\\dist\\packages\\@react-aria\\link\\src\\useLink.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLinkProps} from '@react-types/link';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaLinkOptions extends AriaLinkProps {\n  /** Whether the link is disabled. */\n  isDisabled?: boolean,\n  /**\n   * The HTML element used to render the link, e.g. 'a', or 'span'.\n   * @default 'a'\n   */\n  elementType?: string\n}\n\nexport interface LinkAria {\n  /** Props for the link element. */\n  linkProps: HTMLAttributes<HTMLElement>,\n  /** Whether the link is currently pressed. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a link component.\n * A link allows a user to navigate to another page or resource within a web page\n * or application.\n */\nexport function useLink(props: AriaLinkOptions, ref: RefObject<HTMLElement>): LinkAria {\n  let {\n    elementType = 'a',\n    onPress,\n    onPressStart,\n    onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled,\n    ...otherProps\n  } = props;\n\n  let linkProps: HTMLAttributes<HTMLElement>;\n  if (elementType !== 'a') {\n    linkProps = {\n      role: 'link',\n      tabIndex: !isDisabled ? 0 : undefined\n    };\n  }\n  let {focusableProps} = useFocusable(props, ref);\n  let {pressProps, isPressed} = usePress({onPress, onPressStart, onPressEnd, isDisabled, ref});\n  let domProps = filterDOMProps(otherProps, {labelable: true});\n  let interactionHandlers = mergeProps(focusableProps, pressProps);\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    linkProps: mergeProps(domProps, {\n      ...interactionHandlers,\n      ...linkProps,\n      'aria-disabled': isDisabled || undefined,\n      onClick: (e) => {\n        pressProps.onClick(e);\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}